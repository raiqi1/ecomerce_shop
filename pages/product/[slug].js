import HeaderMenu from "@/components/header";
import ProductDetails from "@/components/productDetails";
import Product from "@/model/Product";
import User from "@/model/User";
import db from "@/utils/db";
import Head from "next/head";
import React, { useState } from "react";

export default function product({ product }) {
  console.log("productOne", product);
  const [activeImage, setActiveImg] = useState("");

  return (
    <div className=" bg-blue-gray-50">
      <Head>
        <title>{product.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <HeaderMenu />
      </div>
      <div className=" flex justify-center">
        <ProductDetails
          product={product}
          activeImage={activeImage}
          setActiveImg={setActiveImg}
        />
      </div>
    </div>
  );
}

export async function getServerSideProps(ctx) {
  const { query } = ctx;
  const slug = query.slug;
  const style = query.style;
  const size = query.size || 0;

  db.connectDb();
  let product = await Product.findOne({ slug })
    .populate({ path: "reviews.reviewBy", model: User })
    .lean();
  let subProduct = product.subProducts[style];
  let harga = subProduct.sizes
    .map((h) => {
      return h.price;
    })
    .sort((a, b) => {
      return a - b;
    });

  let productBaru = {
    ...product,
    style,
    images: subProduct.images,
    sizes: subProduct.sizes,
    colors: product.subProducts.map((p) => p.color),
    discount: subProduct.discount,
    price: subProduct.sizes[size].price,
    rangeHargaSebelumnya: `${harga[0]} - ${harga[harga.length - 1]}`,
    rangeHargaDisc: subProduct.discount
      ? `${(harga[0] - harga[0] / subProduct.discount).toFixed(2)} - ${(
          harga[harga.length - 1] -
          harga[harga.length - 1] / subProduct.discount
        ).toFixed(2)}`
      : `${harga[0]} - ${harga[harga.length - 1]}`,
    hargaDiscount:
      subProduct.discount > 0
        ? (
            subProduct.sizes[size].price -
            subProduct.sizes[size].price / subProduct.discount
          ).toFixed(2)
        : subProduct.sizes[size].price,
  };
  db.disconnectDb();
  return {
    props: {
      product: JSON.parse(JSON.stringify(productBaru)),
    },
  };
}
